"""
Django settings for amcrest project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from corsheaders.defaults import default_methods, default_headers
import datetime
import mongoengine
import urllib.parse



EMAIL_HOST = 'smtp.mailgun.org'
EMAIL_PORT = 111
EMAIL_HOST_USER = 'usert'
EMAIL_HOST_PASSWORD = 'password'
EMAIL_USE_TLS = True


BROKER_URL = 'redis://localhost:1111/1'


BRAINTREE_MERCHANT = '111'
BRAINTREE_PUBLIC_KEY = '111'
BRAINTREE_PRIVATE_KEY = '111'

PRODUCTION_BRAINTREE_MERCHANT='11'
PRODUCTION_BRAINTREE_PUBLIC_KEY='11'
PRODUCTION_BRAINTREE_PRIVATE_KEY='11'

POD_USER = '11'
POD_PASSWORD = '111'
POD_PRODUCT_ID = 'API test product USD'

SIM_ACTIVATE_STATUS = 'ACTIVATED'
SIM_DEACTIVATED_STATUS = 'DEACTIVATED'

SIM_USERNAME = 'aaaaaa'
SIM_API_KEY = 'xxxc'
SIM_ACTIVATION_LINK = "cxcx"

ACTIVATION_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
REACTIVATION_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
CANCELLATION_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
PAYMENT_UPDATE_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
PAYMENT_FAILURE_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
SUBSCRIPTION_CANCELLED_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
SUBSCRIPTION_CANCEL_REQUEST_MAIL_CC = 'santoshkumar.panigrahy@gmail.com'
DEVICE_RETURN_MAIL = 'santoshkumar.panigrahy@gmail.com'
POD_SIM_MESSSAGE_TO = 'santoshkumar.panigrahy@gmail.com'
ERROR_MAIL_RECEIVER = 'santoshkumar.panigrahy@gmail.com'

MAILGUN_EMAIL_DOMAIN = 'mg.amcrest.in'
MAILGUN_FROM_EMAIL = 'noreply@amcrest.com'
MAILGUN_API_KEY = "xxx"

TWILIO_SID = "x"
TWILIO_TOKEN = "xxx"
TWILIO_FROM_NUMBER = "+11"

IMPORT_EXPORT_USE_TRANSACTIONS = True

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#4_mn@%hx$6egmm$4i_4h!(zb^5gn*dn06vpz=&s&&p(%dtt5p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_mysql',
    'django_cron',

    'channels',

    'app',
    'user',
    'listener',
    'services',
    'support',
    'import_export',

]



CRON_CLASSES = [
    "app.cron.trip_buffer_cron.BufferTripCron",
    "app.cron.trip_buffer_cron.GlBufferTripCron",
    
    "app.cron.sim_deactivate_cron.SimDeactivateCron",
    "app.cron.device_listing_cron.DeviceListingCronMachine",
    "app.cron.device_listing_cron.SubscriptionCancelCronMachine",

    "app.cron.trip_24_cron.CalculateGl24Trip",
    "app.cron.trip_24_cron.CalculateGl24TripHighFrequency",
    "app.cron.trip_24_cron.CalculateGl24Trip30Minutes",
    
    "app.cron.obd_trip_24_cron.CalculateObd24Trip",
    "app.cron.driver_score.DriverScoreMchine",

    "app.cron.trip_buffer_cron.BufferTripCalculation",
    "app.cron.trip_buffer_cron.BufferTripCalculationOBD",

    "app.cron.flush_data.DataFlushMachine",

    "app.cron.registered_not_loggedin_cron.RegisteredNotLoggedIn",
    "app.cron.device_not_reporting_alert.RegisteredNotLoggedIn",

    #load sim mapping
    "app.cron.sim_mapping_load.LoadImeiMachine",

    #Check Data Entry
    "app.cron.check_data_entry.DataEntryMachine",

    #Data backup Cron
    "app.cron.backup_data_loader.DataBackupCron",
    "app.cron.backup_data_loader.SttDataBackupCron",


    #Data corrector Cron
    "listener.cron.data_updater.DataCorrectorCron",

    
    
    #Clone Trips
    "app.cron.featured_user_trip.CloneDataCron",

    #Flush Backup data
    "app.cron.backup_data_loader.BackupDataFlushMachine"

    #review
    "app.cron.review.ReviewCronMachine",
    "app.cron.review.ReviewBulkCronMachine"

    #economy_emission
    "app.cron.fuel_economy_emission_cron.FuelEmissionEconomyCron",

    #trip Backup cron
    "app.cron.trip_backup.TripBackupCron",

    #trip delete old
    "app.cron.delete_trip_old.TripDeleteCron",

    "app.cron.delete_trip_and_notification.TripDeleteCron",

    #---New Fuel Economy
    "app.cron.fuel_economy_new_cron.FuelEconomyNewCron"
]



FCM_NOTIFICATION_API_KEY = ""

GOOGLE_MAP_KEY = "Add"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'amcrest.urls'
ASGI_APPLICATION = 'amcrest.routing.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

X_FRAME_OPTIONS ='ALLOW'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = default_methods + (
    'POKE',
)

CORS_ALLOW_HEADERS = default_headers

AUTH_USER_MODEL = 'user.User'

WSGI_APPLICATION = 'amcrest.wsgi.application'




DATABASE_ROUTERS = ['amcrest.DatabaseRouterListener.DatabaseRouterListener', 'amcrest.DatabaseRouterApp.DatabaseRouterApp']
DATABASE_APPS_MAPPING = {'listener': 'listener_db', 'app':'app_db', 'user':'app_db', 'services':'app_db'}


# AWS DB settings


DATABASES = {
    # 206.189.201.246
    # Info@1234
    'default': {
        'NAME': 'amcrest',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'root',
       
        'PASSWORD':'123456',
        'HOST': 'localhost',
        'PORT':3306,
        'options':{
            'init_command': 'SET innodb_strict_mode=1',
            "threaded":True,
            'skip-ssl':True,
            'charset': 'utf8mb4'
        },
        'CONN_MAX_AGE': 0
    },
    'listener_db': {
        'NAME': 'amcrest_listener',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'root',
        
        'PASSWORD':'123456',
        'HOST': 'localhost',
        'PORT':3306,
        'options':{
            'init_command': 'SET innodb_strict_mode=1',
            "threaded":True,
            'skip-ssl':True,
            'charset': 'utf8mb4'
        },
        'CONN_MAX_AGE': 10
    },
    'app_db': {
        'NAME': 'amcrest',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'root',
        # ss
        'PASSWORD':'123456',
        'HOST': 'localhost',
        'PORT':3306,
        'options':{
            'init_command': 'SET innodb_strict_mode=1',
            "threaded":True,
            'skip-ssl':True,
            'charset': 'utf8mb4'
        },
        'CONN_MAX_AGE': 0
    },
}


# DATABASES = {
#     'default': {
#         'NAME': 'amcrest',
#         'ENGINE': 'django.db.backends.mysql',
#         'USER': 'root',
#         'PASSWORD':'Info@12345',
#         # 'PASSWORD':'r00t',
#         'HOST': 'localhost',
#         'PORT':3306,
#         'options':{
#             'init_command': 'SET innodb_strict_mode=1',
#             "threaded":True,
#             'skip-ssl':True
#         },
#         'CONN_MAX_AGE': 0
#     },
#     'listener_db': {
#         'NAME': 'amcrest_listener',
#         'ENGINE': 'django.db.backends.mysql',
#         'USER': 'root',
#         'PASSWORD':'Info@12345',
#         # 'PASSWORD':'r00t',
#         'HOST': 'localhost',
#         'PORT':3306,
#         'options':{
#             'init_command': 'SET innodb_strict_mode=1',
#             "threaded":True,
#             'skip-ssl':True
#         },
#         'CONN_MAX_AGE': 10
#     },
#     'app_db': {
#         'NAME': 'amcrest',
#         'ENGINE': 'django.db.backends.mysql',
#         'USER': 'root',
#         'PASSWORD':'Info@12345',
#         # 'PASSWORD':'r00t',
#         'HOST': 'localhost',
#         'PORT':3306,
#         'options':{
#             'init_command': 'SET innodb_strict_mode=1',
#             "threaded":True,
#             'skip-ssl':True
#         },
#         'CONN_MAX_AGE': 0
#     },
# }


MONGO_USER = 'dd'
MONGO_PASSWORD = 'hh'


mongoengine.connect(
    db="cc",
    host="cc"
)









JWT_AUTH = {
    # how long the original token is valid for
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=2),

    # allow refreshing of tokens
    'JWT_ALLOW_REFRESH': True,

    # this is the maximum time AFTER the token was issued that
    # it can be refreshed.  exprired tokens can't be refreshed.
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
    ),
     'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    "DATE_INPUT_FORMATS": ["%Y-%m-%d"],
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

import re

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 2133)],
        },
    },
}

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": os.environ['REDIS_URL'],  # Here we have Redis DSN (for ex. redis://localhost:6379/1)
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "MAX_ENTRIES": 1000  # Increase max cache entries to 1k (from 300)
#         },
#     }
# }


STATIC_URL = '/static/'


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static-root")

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, "media")